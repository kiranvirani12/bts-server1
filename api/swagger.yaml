---
swagger: "2.0"
info:
  description: "This is api for Better Tech Solution"
  version: "1.0.0"
  title: "Better Tech Solution"
  contact:
    name: "BTS Team"
    url: "https://seedemo.co.uk/"
    email: "bts@support.com"
host: "localhost:3200"
basePath: "/v1"
tags:
  - name: "Authentication"
    description: "Routes related to user sign in and user sign up"
  - name: "User"  
    description: "Routes related to user"  
  - name: "Category"  
    description: "Routes related to camera category"
schemes:
  - "http"
consumes:
  - "application/json"
produces:
  - "application/json"
paths:
  /sign-up:
    post:
      x-swagger-router-controller: "Authentication"
      operationId: "userSignUp"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: user
          in: body
          required: true
          description: The payload for user details
          schema:
            $ref: "#/definitions/user_signUp_details"
      x-public-operation: true
      responses:
        201:
          description: "The JWT token after the user is successfully created"
          schema:
            $ref: "#/definitions/user_create_response"
        400:
          description: "validation error while creating new user"
          schema:
            $ref: "#/definitions/user_create_validation_error"
        409:
          $ref: "#/responses/conflict_error"
        default:
          $ref: "#/responses/server_error_model"
      tags:
        - "Authentication"
      summary: "API to create a new user"
      description: "This API is responsible for creating a new user"      
  /sign-in:
    post:
      x-swagger-router-controller: "Authentication"
      operationId: "userSignIn"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: user
          in: body
          required: true
          description: The payload for user details
          schema:
            $ref: "#/definitions/user_signIn_details"
      x-public-operation: true
      responses:
        201:
          description: "The JWT token after the user is successfully login"
          schema:
            $ref: "#/definitions/user_create_response"
        400:
          description: "validation error while login user"
          schema:
            $ref: "#/definitions/user_create_validation_error"
        409:
          $ref: "#/responses/conflict_error"
        default:
          $ref: "#/responses/server_error_model"
      tags:
        - "Authentication"
      summary: "API to login user"
      description: "This API is responsible for login user" 
  /update-email-status:
    get:
      x-swagger-router-controller: "Authentication"
      operationId: "updateEmailStatus"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      x-public-operation: true
      parameters:
        - $ref: "#/parameters/email_id"
      responses:
        200:
          $ref: "#/responses/user_with_id_response"
        400:
          description: "validation error while sending otp for reset password"
          schema:
            $ref: "#/definitions/user_create_validation_error"
        default:
          $ref: "#/responses/server_error_model"
      tags:
        - "User"
      summary: "API to verify user email"
      description: "This API is responsible for verifying user email"         
  /category:
    post:
      x-swagger-router-controller: "Category"
      operationId: "createCategory"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      security:
        - jwt: []  
      parameters:
        - $ref: "#/parameters/x-request-jwt"
        - name: category
          in: body
          required: true
          description: The payload for category details
          schema:
            $ref: "#/definitions/category_details"
      responses:
        201:
          $ref: "#/responses/category_with_id_response"
        400:
          description: "validation error while creating category"
          schema:
            $ref: "#/definitions/user_create_validation_error"
        default:
          $ref: "#/responses/server_error_model"
      tags:
        - "Category"
      summary: "API to create category"
      description: "This API is responsible for creating category"   
    get:
      x-swagger-router-controller: "Category"
      operationId: "getCategoryList"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      x-public-operation: true
      responses:
        200:
          description: "Get all categories"
          schema:
            type: array
            items:
              $ref: "#/definitions/category_response"
        204:
          description: "Empty category list"
          schema:
            $ref: "#/responses/empty_list"
        400:
          description: "validation error while fetching all categories"
          schema:
            $ref: "#/definitions/category_validation_error"
        default:
          $ref: "#/responses/server_error_model"
      tags:
        - "Category"
      summary: "API to fetch all category"
      description: "This API is responsible for fetching all category"
  /category/{category_id}:
    parameters:
      - $ref: "#/parameters/category_id"
    get:
      x-swagger-router-controller: "Category"
      operationId: "getCategory"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      x-public-operation: true
      responses:
        200:
          $ref: "#/responses/category_with_id_response"
        400:
          description: "validation error while fetching category with given category_id"
          schema:
            $ref: "#/definitions/category_validation_error"
        404:
          $ref: "#/responses/resource_not_found"
        default:
          $ref: "#/responses/server_error_model"
      tags:
        - "Category"
      summary: "API to fetch category with given category_id"
      description: "This API is responsible for fetching category with given category_id"          
definitions:
  mongo_default_fields:
    type: "object"
    required:
      - _id
      - created_at
      - updated_at
      - __v
    properties:
      _id:
        type: string
      created_at:
        type: string
        format: date-time
      updated_at:
        type: string
        format: date-time
      __v:
        type: integer  
  user_signUp_details:
    type: "object"
    required:
      - name
      - email
      - password
    properties:
      name:
        type: string
        pattern: ^[A-Za-z ]{2,}$
        description: "The name of user"
      email:
        type: string
        pattern: ^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z0-9]{2,}$
        description: "The email Id"
      password:
        type: string
        maxLength: 20
        pattern: ^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[!@#\$%\^&\*])(?=.{8,})
        description: "The password"
      contact_number:
        type: string
        pattern: ^[0-9]{10}$
        description: "The contact number of user"
      role:
        type: string
        default: USER
        enum:
          - ADMIN
          - USER
          - SUPER_ADMIN
        description: "The role of system authorized person"
  user_signIn_details:
    type: "object"
    required:
      - email
      - password
    properties:
      email:
        type: string
        pattern: ^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z0-9]{2,}$
        description: "The email Id"
      password:
        type: string
        maxLength: 20
        pattern: ^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[!@#\$%\^&\*])(?=.{8,})
        description: "The password"
  category_details:
    type: "object"
    required:
      - name
    properties:
      name:
        type: string
        description: "The category name" 
  user_details:
    type: "object"
    properties:
      name:
        type: string
        pattern : ^[A-Za-z ]{2,}$
        description: "The name of user"
      contact_number:
        type: string
        description: "The contact number of user"
      address_id:
        type: string
        pattern: ^[0-9a-fA-F]{24}$
        description: "The Address information of user"
      is_deleted:
        type: boolean
        description: "The status of user"
      is_email_verified:
        type: boolean
        description: "The status of email"
    additionalProperties: false
  user_extra_details:
    type: "object"
    properties:
      email:
        description: The user email-id
        type: string
      profile_img:
        description: The user profile image
        type: string
      role:
        type: string
        default: user
        enum:
          - user
          - admin
        description: "The role of system authorized person"  
  category_response:        
    allOf:
      - $ref: "#/definitions/mongo_default_fields"
      - $ref: "#/definitions/category_details"
      - type: "object"
        properties:
          is_deleted:
            type: boolean
            default: false
            description: "The status of category"             
  user_create_response:
    type: "object"
    required:
      - "token"
    properties:
      user_id:
        type: "string"
        description: "The user_id"
      email:
        type: "string"
        description: "The user email"
      name:
        type: "string"
        description: "The user name"
      token:
        type: "string"
        description: "The token for user authentication"
      role:
        type: string
        default: USER
        enum:
          - ADMIN
          - USER
          - SUPER_ADMIN

        description: "The role of system authorized person"      
  
        user_create_validation_error:
    type: object
    required:
      - code
      - message
    properties:
      code:
        type: string
        enum:
          - REQUIRED
          - PATTERN
          - INVALID_TYPE
          - SCHEMA_VALIDATION_FAILED
          - CONTENT_TYPE_NOT_SUPPORTED
          - MODEL_VALIDATION_FAILED
      message:
        type: string
      errors:
        type: array
        items:
          $ref: "#/definitions/user_create_validation_single_error"
  user_response:
    allOf:
      - $ref: "#/definitions/mongo_default_fields"
      - $ref: "#/definitions/user_extra_details"
      - $ref: "#/definitions/user_details"        
  user_create_validation_error:
    type: object
    required:
      - code
      - message
    properties:
      code:
        type: string
        enum:
          - REQUIRED
          - PATTERN
          - INVALID_TYPE
          - SCHEMA_VALIDATION_FAILED
          - CONTENT_TYPE_NOT_SUPPORTED
          - MODEL_VALIDATION_FAILED
      message:
        type: string
      errors:
        type: array
        items:
          $ref: "#/definitions/user_create_validation_single_error"
  user_create_validation_single_error:
    type: object
    required:
      - code
      - message
      - path
    properties:
      code:
        type: string
        enum:
          - PATTERN
          - ENUM_MISMATCH
          - INVALID_TYPE
          - OBJECT_ADDITIONAL_PROPERTIES
          - MIN_LENGTH
          - OBJECT_MISSING_REQUIRED_PROPERTY
      message:
        type: string
      path:
        type: array
        items:
          type: string 
  category_validation_error:
    type: object
    required:
      - code
      - message
    properties:
      code:
        type: string
        enum:
          - REQUIRED
          - PATTERN
          - SCHEMA_VALIDATION_FAILED
          - CONTENT_TYPE_NOT_SUPPORTED
          - MODEL_VALIDATION_FAILED
      message:
        type: string
      errors:
        type: array
        items:
          $ref: "#/definitions/category_validation_single_error"
  category_validation_single_error:
    type: object
    required:
      - code
      - message
      - path
    properties:
      code:
        type: string
        enum:
          - PATTERN
          - ENUM_MISMATCH
          - INVALID_TYPE
          - OBJECT_ADDITIONAL_PROPERTIES
          - MIN_LENGTH
          - MAX_LENGTH
          - OBJECT_MISSING_REQUIRED_PROPERTY
      message:
        type: string
      path:
        type: array
        items:
          type: string
  server_error_model:
    type: object
    required:
      - code
      - message
    properties:
      code:
        type: string
      message:
        type: string
      stack:
        type: string
  resource_not_found_model:
    description: "No resource found"
    type: object
    required:
      - code
      - message
    properties:
      code:
        type: string
        enum:
          - RESOURCE_NOT_FOUND
      message:
        type: string
  empty_list_model:
    description: "No records found"
    type: object
    required:
      - code
      - message
    properties:
      code:
        type: string
        enum:
          - NO_CONTENT
      message:
        type: string                  
  conflict_error_model:
    type: "object"
    required:
      - "code"
      - "message"
    properties:
      code:
        type: "string"
        enum:
          - CONFLICT_ERROR
      message:
        type: "string"        
  server_error_model:
    type: object
    required:
      - code
      - message
    properties:
      code:
        type: string
      message:
        type: string
      stack:
        type: string
parameters:
  x-request-jwt:
    name: x-request-jwt
    in: header
    type: string
    required: true
  email_id:
    name: 'email_id'
    in: query
    type: string
    description: 'Verify email-id'  
  category_id:
    name: category_id
    in: path
    type: string
    pattern: ^[0-9a-fA-F]{24}$
    required: true
  # sub_category_id:
  #   name: sub_category_id
  #   in: path
  #   type: string
  #   pattern: ^[0-9a-fA-F]{24}$
  #   required: true  
responses:
  category_with_id_response:
    description: "The details of category"
    schema:
      $ref: "#/definitions/category_response"
  conflict_error:
    description: "Already exist"
    schema:
      $ref: "#/definitions/conflict_error_model"    
  server_error_model:
    description: "Server error occurred"
    schema:
      $ref: "#/definitions/server_error_model"
  user_with_id_response:
    description: "The details of user"
    schema:
      $ref: "#/definitions/user_response"    
  empty_list:
    description: "Empty List"
    schema:
      $ref: "#/definitions/empty_list_model"   
  resource_not_found:
    description: "Resource not found"
    schema:
      $ref: "#/definitions/resource_not_found_model"         

securityDefinitions:
  jwt:
    type: apiKey
    in: header
    name: x-request-jwt        